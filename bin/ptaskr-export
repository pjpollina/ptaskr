#!/usr/bin/env ruby

require 'bindata'
require 'optparse'

DESC_MAX = 80
DEFAULT_LISTPATH = "~/.config/ptaskr/default.list"

class PtaskrTask < BinData::Record
  endian :little
  string :desc, :read_length => DESC_MAX
  uint16 :goal
  uint16 :reached

  def desc_clean; "#{desc.gsub("\0", "")}"; end

  def to_markdown
    string = "- #{desc_clean} "
    if(goal == 1)
      string << "[#{(reached == 1) ? 'x' : ' '}]"
    else
      string << "(#{reached}/#{goal})"
    end
    return string
  end

  def to_yaml
    <<~YAML
      - !ptaskr-task
        desc: #{desc_clean}
        goal: #{goal}
        reached: #{reached}
    YAML
  end

  def to_xml
    <<~XMLNODE
      <ptaskr-task>
        <desc>#{desc_clean}</desc>
        <goal>#{goal}</goal>
        <reached>#{reached}</reached>
      </ptaskr-task>
    XMLNODE
  end

  def to_json
    %Q<{ "desc":"#{desc_clean}", "goal":#{goal}, "reached":#{reached} }>
  end
end

class PtaskrList
  def initialize(filepath=DEFAULT_LISTPATH)
    full_filepath = File.expand_path(filepath)
    abort("#{$0}: #{full_filepath}: No such file or directory") unless(File.exist?(full_filepath))
    abort("#{$0}: #{full_filepath}: Permission denied") unless(File.readable?(full_filepath))
    begin
      File.open(full_filepath, 'r') do |io|
        @name = io.gets.chomp.gsub("name: ", "")
        @tasks = []
        until io.eof?
          @tasks << PtaskrTask.read(io)
        end
      end
    rescue IOError
      abort("#{$0}: #{full_filepath}: File is not a valid ptaskr list or is corrupted")
    end
  end

  def to_markdown
    md = "## #{@name}\n\n"
    @tasks.each {|t| md << t.to_markdown << "\n"}
    return md
  end

  def to_yaml
    yaml = "name: #{@name}\n"
    @tasks.each {|t| yaml << t.to_yaml}
    return yaml
  end

  def to_xml
    xml = <<~XML 
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <ptaskr-list>
      <name>#{@name}</name>
    XML
    @tasks.each {|t| xml << t.to_xml}
    xml << '</ptaskr-list>'
  end

  def to_json
    json_tasks = (@tasks.collect {|t| t.to_json}).join(",\n    ")
    json = <<~JSON
      {
        "name": "#{@name}",
        "tasks": [
          #{json_tasks}
        ]
      }
    JSON
  end
end

def parse_args(args=ARGV)
  options = {input_file: DEFAULT_LISTPATH, output_type: :markdown}
  parser = OptionParser.new("Usage: ptaskr-export [OPTIONS] [LIST_FILE]", 25, "") do |parser|
    parser.separator <<~SEP
      \nList file defaults to #{DEFAULT_LISTPATH} if none is specified\n
      Option#{' ' * 20}Function
    SEP
    parser.on("-m", "--markdown", "Export list as Markdown (default)") do
      options[:output_type] = :markdown
    end
    parser.on("-y", "--yaml", "Export list as YAML") do
      options[:output_type] = :yaml
    end
    parser.on("-x", "--xml", "Export list as XML") do
      options[:output_type] = :xml
    end
    parser.on("-j", "--json", "Export list as JSON") do
      options[:output_type] = :json
    end
    parser.on_tail("-h", "--help", "Show this message") do
      puts parser
      exit
    end
  end
  begin
    parser.parse!(args)
  rescue OptionParser::InvalidOption => e
    abort("#{$0}: #{e.to_s}\nType '#{$0} --help' for usage information.")
  end
  unless(ARGV.empty?)
    abort("#{$0}: Argument list too long\nType '#{$0} --help' for usage information.") unless(ARGV.count == 1)
    options[:input_file] = ARGV[0]
  end
  return options
end

options = parse_args
list = PtaskrList.new(options[:input_file])

case(options[:output_type])
when(:markdown)
  puts list.to_markdown
when(:yaml)
  puts list.to_yaml
when(:xml)
  puts list.to_xml
when(:json)
  puts list.to_json
end
