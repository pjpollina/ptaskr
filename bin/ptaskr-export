#!/usr/bin/env ruby

require 'bindata'

DESC_MAX = 80

ARGS = {
  markdown: ['-m', '--markdown'],
  yaml:     ['-y', '--yaml'],
  xml:      ['-x', '--xml']
}

class PtaskrTask < BinData::Record
  endian :little
  string :desc, :read_length => DESC_MAX
  uint16 :goal
  uint16 :reached

  def desc_clean; "#{desc.gsub("\0", "")}"; end

  def to_markdown
    string = "- #{desc_clean} "
    if(goal == 1)
      string << "[#{(reached == 1) ? 'x' : ' '}]"
    else
      string << "(#{reached}/#{goal})"
    end
    return string
  end

  def to_yaml
    <<~YAML
      - !ptaskr-task
        desc: #{desc_clean}
        goal: #{goal}
        reached: #{reached}
    YAML
  end

  def to_xml
    <<~XMLNODE
      <ptaskr-task>
        <desc>#{desc_clean}</desc>
        <goal>#{goal}</goal>
        <reached>#{reached}</reached>
      </ptaskr-task>
    XMLNODE
  end
end

class PtaskrList
  attr_reader :tasks

  def initialize(filepath="~/.config/ptaskr/default.list")
    @name = ""
    @tasks = []
    File.open(File.expand_path(filepath), 'r') do |io|
      @name = io.gets.chomp.gsub("name: ", "")
      until io.eof?
        @tasks << PtaskrTask.read(io)
      end
    end
  end

  def to_markdown
    md = "## #{@name}\n\n"
    @tasks.each {|t| md << t.to_markdown << "\n"}
    return md
  end

  def to_yaml
    yaml = "name: #{@name}\n"
    @tasks.each {|t| yaml << t.to_yaml}
    return yaml
  end

  def to_xml
    xml = <<~XML 
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <ptaskr-list>
      <name>#{@name}</name>
    XML
    @tasks.each {|t| xml << t.to_xml}
    xml << '</ptaskr-list>'
  end
end

list = PtaskrList.new
if(ARGV.empty? || !(ARGV & ARGS[:markdown]).empty?)
  puts list.to_markdown
elsif(!(ARGV & ARGS[:yaml]).empty?)
  puts list.to_yaml
elsif(!(ARGV & ARGS[:xml]).empty?)
  puts list.to_xml
end
